@using Microsoft.AspNetCore.Identity
@model WebApplication6.Models.Screening
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    var reservations = Model.Reservations;
    var hall = Model.CinemaHall;
    var movie = Model.Movie;
    var seats = Model.CinemaHall.Seats;
    var base64 = Convert.ToBase64String(movie.Poster);
    var imgSrc = $"data:image/jpeg;base64,{base64}";
}

<div class="movie">
    <img class="movie--poster" src="@imgSrc" alt="" />
    <div class="movie--info">
        <span class="movie--title">@movie.Title</span>
        <div class="movie__details">
            <span class="movie__details--genres">@string.Join(", ", movie.Genres)</span>
            <span class="movie__details--age">&nbsp Od lat: @movie.FromAge &nbsp</span>
            <span class="movie__details--duration">| @movie.Duration minut</span>
        </div>
        <span class="movie--description">@movie.Description</span>
    </div>
</div>

@{
    var props = "";
    var columns = string.Join(" ", Enumerable.Repeat("50px", hall.Width + 1));
    var rows = string.Join(" ", Enumerable.Repeat("50px", hall.Height + 1));
    props += $"grid-template-columns: {columns};";
    props += $"grid-template-rows: {rows};";
}

<div class="seats__wrapper">
    <div class="info">
        <div class="info--header">Zarezerwuj miejsce</div>
        <div class="info--date">Data: @Model.ScreeningDate</div>
    </div>
    <div class="flex--row">
        <div class="seats" style="@props">

            @for (var i = 0; i < hall.Width; ++i)
            {
                <div
                    class="seat--index"
                    style="grid-row: 1; grid-column: @(i + 2)">
                    @(i + 1)
                </div>
            }
            
            @for (var i = 0; i < hall.Height; ++i)
            {
                <div
                    class="seat--index"
                    style="grid-row: @(i + 2); grid-column: 1">
                    @((char) ('A' - 1 + i+1))
                </div>
            }
            
            @foreach (var seat in seats)
            {
                var taken = reservations.Any(t => t.Seats.Any(s => s.Id == seat.Id)) ? "seat--taken" : "seat";
                <div
                    id="seat"
                    class="@taken"
                    data-id="@seat.Id"
                    data-row="@seat.RowNumber"
                    data-col="@seat.ColNumber"
                    style="grid-row: @(seat.RowNumber + 2); grid-column: @(seat.ColNumber + 2)">
                    <!--@seat.RowNumber x @seat.ColNumber-->
                </div>
            }
        </div>
        <div class="seat__legend--wrapper">
            <div class="seat__legend">
                <span class="seat__legend--free"></span>
                <span class="seat__legend--text">Miejsca wolne</span>
            </div>
            <div class="seat__legend">
                <span class="seat__legend--taken"></span>
                <span class="seat__legend--text">Miejsca zajęte</span>
            </div>
            <div class="seat__legend">
                <span class="seat__legend--chosen"></span>
                <span class="seat__legend--text">Miejsca wybrane</span>
            </div>
        </div>
    </div>
</div>


<div class="chosen__wrapper">
    <div id="chosen__container">
        <div class="chosen--title">Wybrane miejsca</div>
    </div>
    <button id="reservation--button">Zarezerwuj miejsca</button>
</div>

<script>
    const chosen = document.getElementById('chosen__container');
    const seats = document.getElementsByClassName('seat');
    const button = document.getElementById('reservation--button');
    
    button.onclick = (() => {
        const userAuthorized = @User.Identity?.IsAuthenticated.ToString().ToLower();
        if (!userAuthorized) {
            alertError('Musisz byc zalogowany aby to zrobic!', 5000);
        } else {
            $.ajax({
                url: 'https://localhost:7152/Home/ReserveSeats',
                type: 'POST',
                dataType: 'json',
                data: { 
                    ScreeningId: @Model.Id,
                    Seats: seatsTaken
                } ,
                cache: false,
                success: function (result) {
                    alertSuccess('Zarezerwowano miejsca!', 5000);
                    switch (result) {
                        case true:
                            break;
                        default:
                            break;
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(xhr.status);
                    alert(thrownError);
                }
            });
        }
        console.log(userAuthorized)
    });
    
    const seatsTaken = [];
    for (let s of seats) {
        s.onclick = (() => {
            if (s.classList.contains('seat--chosen')) {
                removePlace(s);
            } else {
                addPlace(s);
            }
            toggleButton();
        });
    }
    
    const toggleButton = () => {
        if (seatsTaken.length === 0) {
            button.style.visibility = 'hidden'
        } else {
            button.style.visibility = 'visible'
        }
    }
    
    const removePlace = (seat) => {
        const id = seat.dataset.id;
        seat.classList.remove('seat--chosen');
        const index = seatsTaken.indexOf(id);
        if (index !== -1) {
          seatsTaken.splice(index, 1);
        }
        
        const chosenList = chosen.getElementsByClassName('chosen');
        for (let chosen of chosenList) {
            if (chosen.dataset.id === seat.dataset.id) {
                chosen.remove();
                break;
            }
        }
    }
    
    const addPlace = (seat) => {
        const col = parseInt(seat.dataset.col) + 1;
        const row = parseInt(seat.dataset.row) + 1;
        const id = seat.dataset.id;
        
        seat.classList.add('seat--chosen');
        seatsTaken.push(id)
        
        const div = document.createElement('div');
        const span = document.createElement('span');
        div.dataset.id = id;
        div.classList.add('chosen');
        span.classList.add('span');
        span.innerText = `rząd: ${row} miejsce: ${col}`
        
        div.appendChild(span);
        chosen.appendChild(div);
    }
    
    toggleButton();

</script>